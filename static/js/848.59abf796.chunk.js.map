{"version":3,"file":"static/js/848.59abf796.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selector.js","components/Form/Form.js","redux/filter/filter-selectors.js","components/Filter/Filter.js","components/Loader/Loader.js","components/ContactList/ContactList.js","components/App.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const getFilteredContacts = ({contacts, filter}) => {\n  if (!filter) {\n      return contacts.items;\n    }\n\n    const normalizeFilter = filter.toLowerCase();\n    const filteredContacts = contacts.items.filter(({ name, phone }) => {\n      const normalizeName = name.toLowerCase();\n      const result = normalizeName.includes(normalizeFilter) || phone.includes(normalizeFilter);\n      console.log(result);\n      return result;\n    })\n  console.log(filteredContacts);\n    return filteredContacts;\n  }\n ","import React, { useState } from \"react\";\nimport { nanoid } from 'nanoid';\nimport './form.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contacts/contacts-operations\";\nimport { getContacts } from \"redux/contacts/contacts-selector\";\n// import { contactsReducer } from \"redux/contacts/contacts-slice\";\n\nconst Form = () => {\n\n  // const [state, setState] = useState(initialState);\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setPhone(value);\n      default:\n        return;\n    }\n  };\n  \n  const isDuplicate = ({ name, phone }) => {\n    const resullt = contacts.find(item => item.name === name || item.phone  === phone);\n    return resullt;\n  } \n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (isDuplicate({ name, phone })) {\n      return alert(`Contact with name ${name} or number ${phone} is already in list`);\n    }\n\n    // const action = contactsReducer({ name, phone });\n    const action = addContact({ name, phone });\n    dispatch(action);\n    reset();\n  };\n    \n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className='form'>\n      <label htmlFor={nameId} className='form_label'>Name\n        <input\n          type=\"text\"\n          name=\"name\" //name cовпадает с полем в state.name!!\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className=\"input_field\"\n          value={name}\n          onChange={handleInputChange}\n          id={nameId} />\n      </label>\n      <label htmlFor={numberId} className='form_label'>Number\n        <input\n          type=\"tel\"\n          name=\"number\" //name cовпадает с полем в state.name!!\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          className=\"input_field\"\n          value={phone}\n          onChange={handleInputChange}\n          id={numberId} />\n      </label> \n      <button type=\"submit\" className='form_btn'>Add contact</button>\n    </form>\n  );\n}\n\nexport default Form;\n\n","export const getFilter = state => state.filter;","import { nanoid } from 'nanoid';\n// import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport '../Form/form.css';\n\nexport const Filter = () => {\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n    const searchContactId = nanoid();\n\n    const filterInput = evt => {\n        const { value } = evt.target;\n        dispatch(setFilter(value));\n    }\n\n    return (\n        <label className='form_label'>\n            Filter by name\n            <input\n                type=\"text\"\n                name=\"filter\"\n                value={filter}\n                id={searchContactId}\n                onChange={filterInput}\n                className='input_field'\n                placeholder='Search'\n            />\n        </label>\n    )\n};\n\n// export default Filter;","import { RotatingLines } from 'react-loader-spinner';\nimport './Loader.css'\n\nexport const Loader = () => {\n  return (\n    <div className=\"loader-container\">\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"32\"\n        visible={true}\n      />\n    </div>\n  );\n};","import './contact.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selector';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\n\nexport const ContactList = () => {\n    \n    const filteredContacts = useSelector(getFilteredContacts);\n    const dispatch = useDispatch();\n    console.log(filteredContacts);\n\n    const onRemoveContact = (id) => {\n        const action = deleteContact(id);    \n        dispatch(action);\n    }\n    \n    const elements = filteredContacts.map(({ name, phone, id }) => {\n        return <li className=\"contacts_item\" key={id}>\n            \n            {name}: {phone}\n            <button type=\"button\" className='btn_remove' onClick={() => onRemoveContact(id)}>X</button>\n        </li>\n    })\n\n    return (\n        <ul className=\"contact_list\">{elements}</ul>\n    )\n}","import React from \"react\";\nimport Form from \"./Form/Form\";\nimport { Filter } from './Filter/Filter';\nimport { Loader } from \"./Loader/Loader\";\nimport { ContactList } from './ContactList/ContactList';\nimport './Form/form.css';\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/contacts-operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFilteredContacts, selectIsLoading, selectError } from \"redux/contacts/contacts-selector\";\n\nexport function App() {\n\n  const contacts = useSelector(getFilteredContacts);\n  \n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch])\n \n  return (\n      <>\n      <div className=\"form_wrapper\">\n        <h1>Phonebook</h1>\n        <Form />\n        \n      </div> \n      <div className=\"phonebook_contaner\">\n        <h2> Contacts</h2> \n        <Filter />\n         {/* <ContactList className=\"phonebook-container\" />  */}\n        {isLoading && !error && <Loader />}\n        {contacts?.length > 0 && (<ContactList className=\"phonebook-container\" />  )}\n        {/* <ContactList /> */}\n      </div>\n     {error && <p>Oooops... Something wemt wrong</p>}\n      </>\n    )\n}\n\n\n// {contacts?.lenght === 0 && !isLoading && (<p>Contacts list is empty! Try to add contact</p>)} \n//         {contacts?.lenght === 0 && (<p>Contacts list is empty! Try to add contact</p>)}\n\n"],"names":["getContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","getFilteredContacts","filter","normalizeFilter","toLowerCase","filteredContacts","name","phone","result","includes","console","log","useState","setName","setPhone","useSelector","dispatch","useDispatch","nameId","nanoid","numberId","handleInputChange","event","currentTarget","value","reset","onSubmit","evt","preventDefault","find","item","isDuplicate","alert","action","addContact","className","htmlFor","type","pattern","title","required","onChange","id","getFilter","Filter","searchContactId","target","setFilter","placeholder","Loader","strokeColor","strokeWidth","animationDuration","width","visible","ContactList","elements","map","onClick","deleteContact","onRemoveContact","App","useEffect","fetchContacts","length"],"sourceRoot":""}